<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-28T23:33:25+09:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">레이아웃을 이용한 홈페이지 만들기</title><link href="http://localhost:4000/2020/06/06/%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%99%88%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0.html" rel="alternate" type="text/html" title="레이아웃을 이용한 홈페이지 만들기" /><published>2020-06-06T00:00:00+09:00</published><updated>2020-06-06T00:00:00+09:00</updated><id>http://localhost:4000/2020/06/06/%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EC%9D%84%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%ED%99%88%ED%8E%98%EC%9D%B4%EC%A7%80%20%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/2020/06/06/%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%99%88%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0.html">&lt;h2 id=&quot;레이아웃-생각보다-중요했어&quot;&gt;레이아웃, 생각보다 중요했어&lt;/h2&gt;
&lt;p&gt;앞서 Introduction에서는 개발 블로그를 만들고자 하는 개인적인 동기에 대해 이야기했다. 이번 포스팅에서는 개발 블로그의 첫 페이지를 작성하기까지 레이아웃(화면 구성) 및 본격적인 코딩과 관련한 이야기를 하려고 한다. 일단 필자는 레이아웃에 대한 기본 개념조차 없었기 때문에 &lt;a href=&quot;https://www.w3schools.com/css/css_website_layout.asp&quot;&gt;w3school의 웹페이지 레이아웃 관련 문서&lt;/a&gt;를 읽어봤다.&lt;/p&gt;

&lt;h3 id=&quot;레이아웃이-뭔데&quot;&gt;레이아웃이 뭔데?&lt;/h3&gt;
&lt;p&gt;일반적으로 디자인 분야에서 레이아웃 디자인, 혹은 페이지 레이아웃 디자인이란 컴퓨터 디자인 혹은 소프트웨어를 디자인 할 때, &lt;strong&gt;각 구성요소를 효과적으로 배열&lt;/strong&gt;하는 일을 말한다. 디자인에 대한 지식이 거의 전무한 필자는, 사용자가 웹 사이트를 효율적으로 탐색할 수 있도록 텍스트, 미디어, 탐색창 등 다양한 구성 요소들을 예쁘고 효과적으로 배치하는 작업으로 이해하고 있다. 위의 w3school의 레이아웃 설명 페이지에 따르면, 웹사이트를 구성하는 레이아웃 요소는 보편적으로 헤더, 메뉴, 콘텐츠, 푸터로 되며 각 요소의 역할은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;헤더: 웹사이트 상단에 위치하여 사이트 이름이나 로고가 위치하는 곳&lt;/li&gt;
  &lt;li&gt;메뉴(네비게이션 바): 사용자가 웹사이트를 쉽게 탐색할 수 있도록 안내&lt;/li&gt;
  &lt;li&gt;콘텐츠: 페이지에서 가장 넓고 중요한 부분, 몇 개의 column으로 이루어짐&lt;/li&gt;
  &lt;li&gt;푸터: 페이지의 하단에 위치하여 저작권 정보나 연락처를 기재하는 곳&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이래서-레이아웃-레이아웃-하는구나&quot;&gt;이래서 레이아웃, 레이아웃 하는구나&lt;/h3&gt;
&lt;p&gt;‘당연한 내용들 아니야?’ 라고 생각할 수 있지만, 필자는 위의 디자인에서 레이아웃이 상당한 도움이 되었다. 또한, CSS 스타일이나 웹 페이지의 내용을 수정할 경우가 많은데, 정해진 용어로 레이아웃을 나눠두면 유지보수하기에 상당히 편리하다. 이와 관련하여 구글, 네이버의 class, id 네이밍 가이드를 훑어보는 것도 도움이 되었다.&lt;/p&gt;

&lt;p&gt;레이아웃을 반영하기 전과 후를 비교한다면, 작업 속도도 줄어들고 CSS 스타일 적용도 편리해지며, 각 요소안에 들어가는 내용을 구상하는데 있어서도 편해진다. 실제로 다른 웹페이지를 크롬 개발자 도구(F12)를 이용하여 탐색하다보면 레이아웃 요소를 담고 있는 클래스명이나 아이디를 쉽게 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;모방은 창작의 어머니라고 했던가, 개인적으로 자주보는 개발 블로그의 레이아웃을 참고했다. 다음 블로그는 내가 개발블로그를 만드는데 참고한 프론트엔드 개발자이신 &lt;a href=&quot;https://evan-moon.github.io/&quot;&gt;에반님의 블로그&lt;/a&gt;이다. (블로그 형태를 참고할 수 있도록 허락해주신 에반님 감사합니다!) 글의 분량이나 어체, 내용 등 모든 면에서 좋은 글이 많다.&lt;/p&gt;

&lt;h2 id=&quot;아이고-못난-내-자식&quot;&gt;아이고 못난 내 자식&lt;/h2&gt;
&lt;p&gt;레이아웃에 대해 본격적으로 이야기하기 앞서, 내가 처음 만든 웹사이트 홈페이지를 보고 넘어가자. 고슴도치도 제 새끼는 이뻐한다지만, 아무리 내 새끼라도 못나긴 정말 못났다. (문단 제목에 그림자 넣었을 때 뿌듯해 했었다니..) 위 페이지를 만들었을 때는 어떠한 세부적인 내용도 고민하지 않고 만들었기 때문에, 생각나는 아무 내용이나 집어 넣었다.&lt;/p&gt;

&lt;p&gt;레이아웃은 코드를 짜는데도 도움을 주지만, 각 영역마다 어느정도 정해진 목적이 있기 때문에, 레이아웃을 고려하며 페이지를 기획한다면 페이지 내용 정리에도 도움이 된다. 어떤 내용을 넣어야할지 잘 모르겠다면, 다른 기술 블로그를 참고하여 홈페이지를 만들어보도록 하자.&lt;/p&gt;

&lt;h2 id=&quot;레이아웃을-계획하여-홈페이지-만들기&quot;&gt;레이아웃을 계획하여 홈페이지 만들기&lt;/h2&gt;
&lt;p&gt;레퍼런스 페이지를 참고하여, 상단의 헤더와 네비게이션바는 묶어서 하나로 구현했다. 홈페이지의 메인 콘텐츠는 프로필(사진, SNS, 이메일) 및 최근에 업로드 된 포스트와 내가 추천하는 포스트, 그리고 하단의 푸터를 삽입하기로 결정했다. 추가적으로 가끔 작업하는 음악 작업물을 업로드하는 공간도 고려하기로 했다.&lt;/p&gt;

&lt;h3 id=&quot;헤더-및-네비게이션-바&quot;&gt;헤더 및 네비게이션 바&lt;/h3&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gnb&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;top_title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;CliQ&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.studio
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gnb-idx&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/about&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dev&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;DEV&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/works&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Works&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;헤더는 로고가 들어가는 타이틀과 글로벌 네비게이션바로 이루어져 있다. 네비게이션 바는 홈페이지, 포트폴리오, 개발 포스팅, 개인 음악 작업 포스팅 페이지로 이동할 수 있게 링크를 걸어놨다. 이를 CSS를 통해 모든 내용이 줄바꿈 없이 표현될 수 있도록 수정하였고, 마우스 커서에 반응하여 색이 변하도록 했다. 마우스의 위치에 따라 색, 모양 등 CSS를 바꾸는 것은 CSS의 hover 기능, 혹은 Javascript를 통해 구현 가능하다. 필자는 &lt;strong&gt;hover&lt;/strong&gt;가 훨씬 간편하다고 느꼈기 때문에 &lt;strong&gt;hover&lt;/strong&gt; 기능을 통해 구현하였다.&lt;/p&gt;

&lt;h3 id=&quot;메인-컨테이너&quot;&gt;메인 컨테이너&lt;/h3&gt;
&lt;p&gt;메인 콘텐츠는 3개의 column으로 구분하여 좌측에는 프로필, 중앙에는 최근 포스트와 추천 포스트, 우측에는 내 개인 작업물을 표시하는 공간으로 분리하였다. 나중에 포스트가 추가된다면 각 프로젝트 별로 포스트 수, 일간 사용자 등 각종 현황을 볼 수 있는 대시보드나 사이드 네비게이션바도 추가할 예정이다.&lt;/p&gt;

&lt;p&gt;메인 컨테이너의 column 레이아웃은 CSS의 &lt;strong&gt;float&lt;/strong&gt; 속성을 통해 쉽게 구현가능하다. 기본적으로 HTML은 상단에서 하단으로 html 요소들을 표시하며, 수평 형태의 레이아웃을 구현하기 위해서는 여러 CSS 속성을 사용해야한다. 이중 대표적으로 &lt;strong&gt;float&lt;/strong&gt;은 한 컨테이너 내에서 쉽게 수평 방향 배열을 가능하게 하는 기능을 제공한다. 필자는 다음 링크를 참고하여 3 column 레이아웃을 만들었다. &lt;a href=&quot;https://webclub.tistory.com/606&quot;&gt;플로팅(float) 레이아웃과 clear 속성&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;프로필&quot;&gt;프로필&lt;/h4&gt;
&lt;p&gt;먼저 가장 좌측 column의 프로필에는 내 사진 및 예명, SNS 프로필을 넣었다. SNS 아이콘은 font awesome에서 제공하는 아이콘을 이용했다. font awesome 외에 구글에서 제공하는 Material Icons등 무료로 편하게 사용할 수 있는 아이콘이 많다. 이러한 아이콘들은 주로 html의 &lt;strong&gt;link&lt;/strong&gt; 태그를 이용하여 스타일 시트를 가져오고, 미리 정의된 class 이용하여 아이콘을 표시하는 방식이다. 각 사이트 마다 예시 코드가 있으니 이를 가져와서 사용하는 곳에 맞게 크기, 색상등을 수정하면 편하게 이용할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;메인-콘텐츠&quot;&gt;메인 콘텐츠&lt;/h4&gt;
&lt;p&gt;가운데 column은 메인 콘텐츠를 표시하는 영역으로 나는 일단 최근 포스트들을 표시하도록 했다. 일단은 최근 5개의 포스트를 Recent Post로 노출할 계획이다. 나중에 게시물들이 쌓인다면, 그나마 자랑할 수 있을만한 포스트나 완료된 프로젝트를 노출하려하려한다. (지금의 내겐 너무 먼 미래..)&lt;/p&gt;

&lt;p&gt;각 포스트는 제목과 최초 작성 일자, 대표이미지를 표시하도록 했다. 대표 이미지는 주로 인터넷에서 상업적으로 이용 가능한 무료 이미지(royalty free)를 가져왔다. Shutterstock, drible 등 여러 사이트가 있지만 적절한 무료이미지를 가장 찾기 쉬웠던건 &lt;a href=&quot;https://pixabay.com/ko/&quot;&gt;Pixabay&lt;/a&gt;라는 사이트이다. 개인적으로 퀄리티는 조금 떨어진다고 생각하나, 상업적으로 이용할 수 있는 무료 이미지가 많다. 업로드 되는 포스트 이미지도 모두 카드뷰로 구현하였으며, 각각의 카드에 대해 CSS hover 속성을 통해 마우스 커서를 옮겼을 때, 카드가 팝업되는 것처럼 애니메이션을 구현하였다. (만들고 나서 제일 뿌듯..)&lt;/p&gt;

&lt;h3 id=&quot;우측-카드-섹션&quot;&gt;우측 카드 섹션&lt;/h3&gt;
&lt;p&gt;레이아웃을 결정할 때 가장 고민했던게 이 부분을 뺄까 말까에 대한 것이었다. 3 column은 노트북이나 데스크탑을 보는 사람에게만 적합한 형식이라, 모바일이나 테블릿 사용자에게는 적합히지 않고 이부분에 어떤 내용을 넣을까도 고민이었다. 다만 개발 블로그다 보니, 아무래도 테블릿 사용자보다는 노트북, 데스크탑 사용자가 훨씬 많을 것 같았고, 추후 다양한 플러그인을 직접 구현해서 이 부분에 노출시키면 재미있을 것 같았다. 일단은 예전에 녹음까지 했던 개인 작업물들을 올려놓았지만, 아마 곧 다른 프로젝트를 개시하는 공간으로 바꾸지 않을까 싶다.&lt;/p&gt;

&lt;h3 id=&quot;푸터&quot;&gt;푸터&lt;/h3&gt;
&lt;p&gt;푸터는 웹사이트 하단에 위치하여 사이트맵, 맨 위로 올라가기 버튼, 연락처, 저작권 사항을 표시하는 곳이다. HTML 태그중 &lt;strong&gt;footer&lt;/strong&gt; 태그를 통해 구현할 수 있다. 작성일 기준 현재는 글로벌 네비게이션 바와 같은 사이트맵, 간단한 저작권 정보만 기재해놓았다. 맨 위로 올라가는 버튼 등 Javascript를 이용하는 작업은 추후 진행하려한다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;
&lt;p&gt;이상으로 내 첫 웹사이트의 첫 랜딩페이지를 만든 과정에 대해 설명했다. 포스팅 페이지는 랜딩 페이지와 많은 부분이 겹치므로 레이아웃에 대한 설명은 넘어가려한다. 처음 페이지를 만들 때만해도 막막하고 답답했지만, 어느정도 모양은 잡혀가는 것을 보니 뿌듯하기도 하고 괜히 이뻐보이기도 한다. 다음 포스팅은 만든 HTML, CSS 페이지를 웹에 개시하는 방법에 대해 이야기하려한다.&lt;/p&gt;</content><author><name>cliq</name></author><summary type="html">레이아웃, 생각보다 중요했어 앞서 Introduction에서는 개발 블로그를 만들고자 하는 개인적인 동기에 대해 이야기했다. 이번 포스팅에서는 개발 블로그의 첫 페이지를 작성하기까지 레이아웃(화면 구성) 및 본격적인 코딩과 관련한 이야기를 하려고 한다. 일단 필자는 레이아웃에 대한 기본 개념조차 없었기 때문에 w3school의 웹페이지 레이아웃 관련 문서를 읽어봤다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/webdesign.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/webdesign.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction</title><link href="http://localhost:4000/2020/05/23/introduction.html" rel="alternate" type="text/html" title="Introduction" /><published>2020-05-23T00:00:00+09:00</published><updated>2020-05-23T00:00:00+09:00</updated><id>http://localhost:4000/2020/05/23/introduction</id><content type="html" xml:base="http://localhost:4000/2020/05/23/introduction.html">&lt;h2 id=&quot;문제가-뭐냐&quot;&gt;문제가 뭐냐&lt;/h2&gt;
&lt;p&gt;작년 이맘쯤에 서울로 올라왔으니까 상경한 후 1년 정도 지났다. 처음 8개월은 인공지능 IT 회사에서 데이터 사이언티스트로 일했고, 이후 4개월은 창업을 위해 이것저것 뒤적거리다 보니 어느새 1년이 지났다. 앞의 8개월은 함께 일했던 분들의 도움으로 비교적 수월하게 정보를 습득할 수 있었지만, 뒤 4개월은 처음부터 끝까지 혼자 삽질을 해야했기 때문에 순탄하지만은 않았다.&lt;/p&gt;

&lt;p&gt;‘나는 훌륭한 백엔드 개발자가 되겠어!’, ‘혼자서 서비스 배포까지 할 수 있는 풀스택 개발자가 될거야!’와 같은 구체적인 목표 설정 없이 ‘그냥 창업을 하려면 개발은 할 줄 알아야지’가 4개월간 개발 공부를 하는 동기였다. 때문에 공부 주제와 과정이 분명하게 그려지지 않았고, 지금 생각해보면 만족할만큼 끝까지 공부한 내용이 없는 것 같다. &lt;del&gt;(절반쯤 읽고 덮은 개발 관련 도서만 4~5권..)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;분명 놀진 않았는데, 내 실력은 왜 발전이 없는가? 나는 왜 항상 부족하다는 기분이 드는가?&lt;/strong&gt; 이게 내 문제였다. 전반적인 개발 흐름이나 관련 용어, 몇몇 프로그래밍 언어 등 얄팍하게 알고 있는 지식은 1년 전에 비해서 많이 늘었다고 생각하지만, 막상 누군가 ‘그럼 그거 개발할 수 있어? 얼마나 걸려?’라고 물어본다면 자신이 없다.&lt;del&gt;(공동 창업하는 친구가 자주 물어보는 질문이다.)&lt;/del&gt; 이게 내가 발전이 없는 것 같다고 느끼는 원인이라고 생각했고, 회사를 다녔던 8개월을 통해 해결할 수 있는 힌트를 얻으려고 했다.&lt;/p&gt;

&lt;h2 id=&quot;그땐-참-좋았지&quot;&gt;그땐 참 좋았지&lt;/h2&gt;
&lt;p&gt;회사에 근무했던 기간을 떠올려보면, 공부하는 목표가 분명했다. 당장 내게 주어진 문제를 해결해야했고, 그 문제를 해결했을 때 눈에 보이는 결과가 명확했다. 결과물에 대한 피드백도 즉각적으로 받을 수 있었고 문제를 잘 해결했을 때 돌아오는 회사 동료분들의 칭찬과 격려가 일종의 보상으로 작용했다.&lt;/p&gt;

&lt;p&gt;그 환경을 벗어난 지금, 회사 환경과 비슷한 다른 대체제가 필요했다. 장기적인 목표를 설정하기에는 아직 지식이 너무 부족해서 무리였지만, 단기 목표, 즉각적인 피드백, 완료했을 때 보상을 얻을 수 있는 어떠한 과정은 앞으로의 공부를 위해 필요하다고 생각했다. 정리하자면, 나는 아래 세가지를 만족하는 어떤 &lt;strong&gt;공부방법&lt;/strong&gt;이 필요했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단기적인 목표&lt;/li&gt;
  &lt;li&gt;즉각적인 피드백&lt;/li&gt;
  &lt;li&gt;공부가 끝났을 때 보고 만족해할 수 있는 결과물 (돈이면 제일 좋겠지만..)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개발블로그-시작하기&quot;&gt;개발블로그 시작하기&lt;/h2&gt;
&lt;p&gt;세가지 조건을 만족하는 여러 방안을 생각했다. 캐글 인공지능 컴페티션, 사이드 프로젝트, 오픈 소스 프로젝트 참여하기, 개발블로그가 고려 대상이였다. 이 공부 방법들이 세가지 조건을 어느정도 만족하는 방안들이었지만, 아직 무엇을 공부할 것인가에 대해 확실히 결정되지 않았기 때문에 다양한 공부 분야에 대해 보편적으로 적용될 수 있는 공부 방법이 필요했다.&lt;/p&gt;

&lt;p&gt;각각의 공부방법들에 대해 설명한 글들을 참고하다가, 유튜브 채널 ‘태용’에서 배달의 민족 개발자분의 인터뷰 영상을 보고 개발블로그를 시작해야겠다고 결심했다. (지방대 개발 비전공자가 배달의 민족 리드 개발자가 되기까지)&lt;/p&gt;

&lt;p&gt;1개의 포스트 단위로 이루어진 개발블로그는 단기적인 공부 목표로 충분했고, 개인적으로 무언가를 정리해두는 것을 좋아하는 나에게 ‘나만의 웹페이지’는 충분히 매력적인 결과물이었다. 댓글 기능이나 구글 어날리틱스를 이용한 방문자 분석 등을 이용한다면 각각의 포스트에 대해 비교적 즉각적인 피드백을 받을 수 있을 것이라고 생각했다.&lt;/p&gt;

&lt;h2 id=&quot;그래서-어떻게-할래&quot;&gt;그래서 어떻게 할래?&lt;/h2&gt;
&lt;p&gt;그래서 개발 블로그를 시작하자고 마음은 먹었지만, 어떻게 시작할지, 어떤 내용을 적어야할지에 대해서는 여전히 고민이다. 알고 있는 지식도 그렇게 많지 않아서 간단한 HTML, CSS, Javascript 정도만 할 줄 아는 나에게 웹페이지 퍼블리싱은 여전히 너무나 어려워보였다.&lt;/p&gt;

&lt;p&gt;‘개발 블로그 플랫폼’ 이라는 키워드로 구글링을 하면서 미디엄, 깃헙, 티스토리, 네이버 블로그 등 많은 선택지가 있음을 알게되었지만, 기왕 하는거 하나하나 다 해보자는 (끔찍한) 패기넘치는 생각으로 웹 페이지 디자인부터 퍼블리싱까지 다 하기로 마음을 먹었다. 겸사겸사 그 과정들을 개발 블로그 첫 콘텐츠로 하면 적절해보이기도 했다.&lt;/p&gt;

&lt;h2 id=&quot;짠-지금-보고계신-허접한-결과가-바로-그것입니다&quot;&gt;짠 지금 보고계신 허접한 결과가 바로 그것입니다.&lt;/h2&gt;
&lt;p&gt;일단 어느정도 페이지를 만들자 마자 바로 첫 포스트를 쓰는 거라, 지금은 많이 부족해보이지만 포스트를 이어가면서 기능을 추가하면 그럴듯해지지 않을까 하는게 내 작은 바램이다. 제발 이번에는 꾸준히좀 해보자…&lt;/p&gt;</content><author><name>cliq</name></author><summary type="html">문제가 뭐냐 작년 이맘쯤에 서울로 올라왔으니까 상경한 후 1년 정도 지났다. 처음 8개월은 인공지능 IT 회사에서 데이터 사이언티스트로 일했고, 이후 4개월은 창업을 위해 이것저것 뒤적거리다 보니 어느새 1년이 지났다. 앞의 8개월은 함께 일했던 분들의 도움으로 비교적 수월하게 정보를 습득할 수 있었지만, 뒤 4개월은 처음부터 끝까지 혼자 삽질을 해야했기 때문에 순탄하지만은 않았다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/one-way-street.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/one-way-street.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>